@page "/member_management"
@inject IMemberService MemberService

<h4>Search and List Members</h4>
<div>
    <input type="text" @bind="searchTerm" placeholder="Enter name or email" />
    <button @onclick="SearchMembers">Search</button>
    <span> @searchMemberResults.Count results </span>
</div>

@if (searchMemberResults != null && searchMemberResults.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var member in searchMemberResults.Skip((currentPage - 1) * pageSize).Take(pageSize))
            {
                <tr>
                    <td>@member.Name</td>
                    <td>@member.Email</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => BeginEdit(member)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => ConfirmDelete(member)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @if (searchMemberResults.Count > pageSize)
    {
    <div>
        <button class="btn btn-link" disabled="@IsFirstPage()" @onclick="PrevPage">Previous</button>
        <button class="btn btn-link" disabled="@IsLastPage()" @onclick="NextPage">Next</button>
    </div>
    }
}
else
{
    <p>No members found.</p>
}

@if (!string.IsNullOrEmpty(errorDeletionMessage))
{
    <div class="alert alert-warning">@errorDeletionMessage</div>
}

@if (confirmingMember != null)
{
    <div class="modal" tabindex="-1" style="display:block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-name">Confirm Delete</h5>
                    <button type="button" class="close" @onclick="() => confirmingMember = null">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this member?</p>
                    <p><strong>Name:</strong> @confirmingMember.Name</p>
                    <p><strong>Email:</strong> @confirmingMember.Email</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="() => DeleteMember(confirmingMember)">Delete</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => confirmingMember = null">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

<h4>Member Management</h4>
<EditForm Model="@editingMember" OnValidSubmit="SaveMember">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="editingMember.Name" />
    </div>
    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="editingMember.Email" />
    </div>
    <div class="form-group mt-3">
        <button type="submit" class="btn btn-primary mr-2">@ActionText</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
    </div>
    @if (!string.IsNullOrEmpty(validationMessage))
    {
        <div class="alert alert-danger">@validationMessage</div>
    }
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }
</EditForm>

@code {
    // Class fields
    private Member editingMember = new Member();
    private Member originalMember; // Used to store the original data when editing begins
    private List<Member> searchMemberResults = new List<Member>();
    private string searchTerm;
    private Member confirmingMember; // Store the member to be potentially deleted
    private string validationMessage;
    private string successMessage;
    private string errorDeletionMessage;
    private string ActionText = "Add Member";
    private int currentPage = 1;
    private int pageSize = 5; 

    // Component initialization
    protected override async Task OnInitializedAsync()
    {
        await FetchMembers();
        ResetForm();
    }

    // Fetch members from the service
    private async Task FetchMembers()
    {
        try
        {
            var members = await MemberService.GetMembersAsync();
            searchMemberResults = members.ToList();
        }
        catch (Exception ex)
        {
            validationMessage = $"Error fetching members: {ex.Message}";
        }
    }

    // Pagination helpers
    private bool IsFirstPage() => currentPage == 1;
    private bool IsLastPage() => (currentPage * pageSize) >= searchMemberResults.Count;
    private void PrevPage()
    {
        if (!IsFirstPage())
            currentPage--;
    }
    private void NextPage()
    {
        if (!IsLastPage())
            currentPage++;
    }

    // Search members based on input
    private async Task SearchMembers()
    {
        try
        {
            var members = await MemberService.GetMembersAsync();
            if (string.IsNullOrWhiteSpace(searchTerm))
            {
                searchMemberResults = members.ToList();
            }
            else
            {
                searchMemberResults = members.Where(b => b.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                                                    || b.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
            }
            errorDeletionMessage = "";
        }
        catch (Exception ex)
        {
            errorDeletionMessage = "Search failed: " + ex.Message;
        }
    }

    // Start editing a member
    private void BeginEdit(Member member)
    {
        originalMember = member; // Store the original member
        editingMember = new Member // Create a copy of the member to edit
        {
            Id = member.Id,
            Name = member.Name,
            Email = member.Email
        };
        ActionText = "Update Member";
        ClearMessages();
    }

    // Cancel the current editing
    private void CancelEdit()
    {
        ResetForm();
        ClearMessages();
    }

    // Reset the form to its initial state
    private void ResetForm()
    {
        editingMember = new Member();
        ActionText = "Add Member";
    }

    // Clear all messages displayed on the UI
    private void ClearMessages()
    {
        validationMessage = string.Empty;
        successMessage = string.Empty;
        errorDeletionMessage = string.Empty;
    }

    // Save the member details
    private async Task SaveMember()
    {
        string localSuccessMessage = "";
        try
        {
            if (editingMember.Id == 0)
            {
                await MemberService.AddMember(editingMember);
                localSuccessMessage = "Member added successfully.";
            }
            else
            {
                await MemberService.UpdateMember(editingMember);
                localSuccessMessage = "Member updated successfully.";
            }
            validationMessage = ""; // Clear validation message on success
            successMessage = localSuccessMessage;
        }
        catch (Exception ex)
        {
            validationMessage = "Failed to save member: " + ex.Message;
            successMessage = "";
        }
        finally
        {
            await FetchMembers();
            StateHasChanged(); // Ensure UI update
            await Task.Delay(3000);
            ClearMessages();
            ResetForm(); // Reset form fields after UI update
        }
    }

    // Confirm deletion of a member
    private void ConfirmDelete(Member member)
    {
        try
        {
            if (member.NumberOfLoans > 0)
            {
                throw new InvalidOperationException("This member has unreturned books");
            }
            confirmingMember = member;
            errorDeletionMessage = "";
        }
        catch (Exception ex)
        {
            errorDeletionMessage = "Failed to delete member: " + ex.Message;
        }
        
    }

    // Execute deletion of a member
    private async Task DeleteMember(Member member)
    {
        try
        {
            await MemberService.RemoveMember(member.Id);
            await FetchMembers();
            if (editingMember.Id == member.Id)
            {
                ResetForm();
            }
            errorDeletionMessage = "";
            confirmingMember = null;
        }
        catch (Exception ex)
        {
            errorDeletionMessage = "Failed to delete member: " + ex.Message;
        }
    }
}
