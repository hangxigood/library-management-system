@page "/"
@inject IBookService BookService

<h4>Search and List Books</h4>
<div>
    <input type="text" @bind="searchTerm" placeholder="Search books..." />
    <button @onclick="SearchBooks">Search</button>
    <span> @searchBookResults.Count results </span>
</div>

@if (searchBookResults != null && searchBookResults.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>ISBN</th>
                <th>TotalCopies</th>
                <th>AvailableCopies</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in searchBookResults.Skip((currentPage - 1) * pageSize).Take(pageSize))
            {
                <tr>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                    <td>@book.ISBN</td>
                    <td>@book.TotalCopies</td>
                    <td>@book.AvailableCopies</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => BeginEdit(book)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => ConfirmDelete(book)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @if (searchBookResults.Count > pageSize)
    {
    <div>
        <button class="btn btn-link" disabled="@IsFirstPage()" @onclick="PrevPage">Previous</button>
        <button class="btn btn-link" disabled="@IsLastPage()" @onclick="NextPage">Next</button>
    </div>
    }
}
else
{
    <p>No books found.</p>
}

@if (!string.IsNullOrEmpty(errorDeletionMessage))
{
    <div class="alert alert-warning">@errorDeletionMessage</div>
}

@if (confirmingBook != null)
{
    <div class="modal" tabindex="-1" style="display:block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="close" @onclick="() => confirmingBook = null">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this book?</p>
                    <p><strong>Title:</strong> @confirmingBook.Title</p>
                    <p><strong>Author:</strong> @confirmingBook.Author</p>
                    <p><strong>ISBN:</strong> @confirmingBook.ISBN</p>
                    <p><strong>Total Copies:</strong> @confirmingBook.TotalCopies</p>
                    <p><strong>Available Copies:</strong> @confirmingBook.AvailableCopies</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="() => DeleteBook(confirmingBook.Id)">Delete</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => confirmingBook = null">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

<h4>Book Management</h4>
<EditForm Model="@editingBook" OnValidSubmit="SaveBook">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="title">Title:</label>
        <InputText id="title" class="form-control" @bind-Value="editingBook.Title" />
    </div>
    <div class="form-group">
        <label for="author">Author:</label>
        <InputText id="author" class="form-control" @bind-Value="editingBook.Author" />
    </div>
    <div class="form-group">
        <label for="isbn">ISBN:</label
        <InputText id="isbn" class="form-control" @bind-Value="editingBook.ISBN" />
    </div>
    <div class="form-group">
        <label for="totalCopies">TotalCopies:</label>
        <InputNumber id="totalCopies" class="form-control" @bind-Value="editingBook.TotalCopies" />
    </div>
    <div class="form-group mt-3">
        <button type="submit" class="btn btn-primary mr-2">@ActionText</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
    </div>
    @if (!string.IsNullOrEmpty(validationMessage))
    {
        <div class="alert alert-danger">@validationMessage</div>
    }
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }
</EditForm>

@code {
    // Class fields
    private Book editingBook = new Book();
    private Book originalBook; // Used to store the original data when editing begins
    private List<Book> searchBookResults = new List<Book>();
    private string searchTerm;
    private Book confirmingBook; // Store the book to be potentially deleted
    private string validationMessage;
    private string successMessage;
    private string errorDeletionMessage;
    private string ActionText = "Add Book";
    private int currentPage = 1;
    private int pageSize = 5; 

    // Component initialization
    protected override async Task OnInitializedAsync()
    {
        await FetchBooks();
        ResetForm();
    }

    // Fetch books from the service
    private async Task FetchBooks()
    {
        try
        {
            var books = await BookService.GetBooksAsync();
            searchBookResults = books.ToList();
        }
        catch (Exception ex)
        {
            validationMessage = $"Error fetching books: {ex.Message}";
        }
    }

    // Pagination helpers
    private bool IsFirstPage() => currentPage == 1;
    private bool IsLastPage() => (currentPage * pageSize) >= searchBookResults.Count;
    private void PrevPage()
    {
        if (!IsFirstPage())
            currentPage--;
    }
    private void NextPage()
    {
        if (!IsLastPage())
            currentPage++;
    }

    // Search books based on input
    private async Task SearchBooks()
    {
        try
        {
            var books = await BookService.GetBooksAsync();
            if (string.IsNullOrWhiteSpace(searchTerm))
            {
                searchBookResults = books.ToList();
            }
            else
            {
                searchBookResults = books.Where(b => b.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                                                    || b.Author.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
            }
            errorDeletionMessage = "";
        }
        catch (Exception ex)
        {
            errorDeletionMessage = "Search failed: " + ex.Message;
        }
    }

    // Start editing a book
    private void BeginEdit(Book book)
    {
        originalBook = book; // Store the original book
        editingBook = new Book // Create a copy of the book to edit
        {
            Id = book.Id,
            Title = book.Title,
            Author = book.Author,
            ISBN = book.ISBN,
            TotalCopies = book.TotalCopies,
            AvailableCopies = book.AvailableCopies
        };
        ActionText = "Update Book";
        ClearMessages();
    }

    // Cancel the current editing
    private void CancelEdit()
    {
        ResetForm();
    }

    // Reset the form to its initial state
    private void ResetForm()
    {
        editingBook = new Book();
        ActionText = "Add Book";
    }

    // Clear all messages displayed on the UI
    private void ClearMessages()
    {
        validationMessage = string.Empty;
        successMessage = string.Empty;
        errorDeletionMessage = string.Empty;
    }

    // Save the book details
    private async Task SaveBook()
    {
        string localSuccessMessage = "";
        try
        {
            if (editingBook.Id == 0)
            {
                await BookService.AddBook(editingBook);
                localSuccessMessage = "Book added successfully.";
            }
            else
            {
                await BookService.UpdateBook(editingBook);
                localSuccessMessage = "Book updated successfully.";
            }
            validationMessage = ""; // Clear validation message on success
            successMessage = localSuccessMessage;
        }
        catch (Exception ex)
        {
            validationMessage = "Failed to save book: " + ex.Message;
            successMessage = "";
        }
        finally
        {
            await FetchBooks();
            StateHasChanged(); // Ensure UI update
            await Task.Delay(3000);
            ClearMessages();
            ResetForm(); // Reset form fields after UI update
        }
    }

    // Confirm deletion of a book
    private void ConfirmDelete(Book book)
    {
        if (book.AvailableCopies < book.TotalCopies)
        {
            errorDeletionMessage = $"Cannot delete '{book.Title}' because there are still {book.TotalCopies - book.AvailableCopies} rentals";
            confirmingBook = null; // Reset confirming book as we are not proceeding to deletion
        }
        else
        {
            confirmingBook = book;
            errorDeletionMessage = "";
        }
    }

    // Execute deletion of a book
    private async Task DeleteBook(int Id)
    {
        try
        {
            await BookService.RemoveBook(Id);
            await FetchBooks();
            if (editingBook.Id == Id)
            {
                ResetForm();
            }
            errorDeletionMessage = "";
            confirmingBook = null;
        }
        catch (Exception ex)
        {
            errorDeletionMessage = "Failed to delete book: " + ex.Message;
        }
    }
}
