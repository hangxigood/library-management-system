@page "/"
@inject IBookService BookService

<h4>Add New Book</h4>
<EditForm Model="@newBook" OnValidSubmit="AddBook">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="title">Title:</label>
        <InputText id="title" class="form-control" @bind-Value="newBook.Title" />
    </div>
    <div class="form-group">
        <label for="author">Author:</label>
        <InputText id="author" class="form-control" @bind-Value="newBook.Author" />
    </div>
    <div class="form-group">
        <label for="isbn">ISBN:</label>
        <InputText id="isbn" class="form-control" @bind-Value="newBook.ISBN" />
    </div>
    <button type="submit" class="btn btn-primary">Add Book</button>
</EditForm>

<h4>Update/Delete Book</h4>
<!-- Search Form -->
<div>
    <input type="text" @bind="searchBookTerm" placeholder="Search books..." />
    <button @onclick="SearchBooks">Search</button>
</div>

<!-- Books Table -->
@if (searchBookResults != null && searchBookResults.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>ISBN</th>
                <th>Total Copies</th>
                <th>Available Copies</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in searchBookResults)
            {
                <tr>
                    <td>
                        @if (IsEditingBook(book.Id))
                        {
                            <input type="text" @bind="book.Title" />
                        }
                        else
                        {
                            @book.Title
                        }
                    </td>
                    <td>
                        @if (IsEditingBook(book.Id))
                        {
                            <input type="text" @bind="book.Author" />
                        }
                        else
                        {
                            @book.Author
                        }
                    </td>
                    <td>
                        @if (IsEditingBook(book.Id))
                        {
                            <input type="text" @bind="book.ISBN" />
                        }
                        else
                        {
                            @book.ISBN
                        }
                    </td>
                    <td>
                        @if (IsEditingBook(book.Id))
                        {
                            <input type="number" @bind="book.TotalCopies" />
                        }
                        else
                        {
                            @book.TotalCopies
                        }
                    </td>
                    <td>@book.AvailableCopies</td>
                    <td>
                        @if (IsEditingBook(book.Id))
                        {
                            <button class="btn btn-success" @onclick="() => SaveBook(book)">Save</button>
                            <button class="btn btn-secondary" @onclick="() => CancelEdit(book.Id)">Cancel</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="() => BeginEdit(book.Id)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteBook(book.Id)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No books found.</p>
}

@code {
    private Book newBook = new Book();
    private List<Book> books = new List<Book>();
    private List<Book> searchBookResults = new List<Book>();
    private Dictionary<int, bool> editingBookStates = new Dictionary<int, bool>();
    private string searchBookTerm;

    protected override async Task OnInitializedAsync()
    {
        //performing asynchronous operations that need to complete before the component is displayed
        await FetchBooks();
    }
    private async Task AddBook()
    {
        await BookService.AddBook(newBook);
        // Optionally, add logic to confirm book addition and clear the form for new entries
        newBook = new Book(); // Reset the form
        await FetchBooks();
    }
    
    private async Task FetchBooks()
    {
        books = await BookService.GetBooksAsync();
    }

    private async Task SearchBooks()
    {
        if (string.IsNullOrWhiteSpace(searchBookTerm))
        {
            searchBookResults = books;
        }
        else
        {
            searchBookResults = books.Where(b => b.Title.Contains(searchBookTerm, StringComparison.OrdinalIgnoreCase) 
                                          || b.Author.Contains(searchBookTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        // Reset editing states for the search result
        editingBookStates.Clear();
        foreach (var book in searchBookResults)
        {
            editingBookStates[book.Id] = false;
        }
    }

    private bool IsEditingBook(int Id) => editingBookStates.TryGetValue(Id, out var isEditing) && isEditing;

    private void BeginEdit(int Id)
    {
        if (editingBookStates.ContainsKey(Id))
        {
            editingBookStates[Id] = true;
        }
    }

    private async Task SaveBook(Book bookToSave)
    {
        editingBookStates[bookToSave.Id] = false;
        await BookService.UpdateBook(bookToSave); // Persist changes
        await FetchBooks(); // Refresh the entire list
        await SearchBooks(); // Refresh search results
    }

    private void CancelEdit(int Id)
    {
        editingBookStates[Id] = false;
        // Optionally revert any changes by re-fetching the book details
    }

    private async Task DeleteBook(int Id)
    {
        await BookService.RemoveBook(Id);
        await FetchBooks(); // Refresh the entire list
        await SearchBooks(); // Refresh search results
        editingBookStates.Remove(Id); // Clean up the editing state
    }
    
}
